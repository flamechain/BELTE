
lowlevel class Dictionary<type TKey, type TValue> {
    public struct Entry {
        public int hashCode;
        public int next;
        public TKey key;
        public TValue value;
    }
}

lowlevel class KeyValuePair<type TKey, type TValue> {
    TKey key;
    TValue value;

    public constructor(TKey key, TValue value) {
        this.key = key;
        this.value = value;
    }

    public override string ToString() {
        string representation = "{ ";

        if (key is Object) {
            representation += ToObject(key).ToString();
        } else {
            representation += ((string)ToAny(key));
        }

        representation += ", ";

        if (value is Object) {
            representation += ToObject(value).ToString();
        } else {
            representation += ((string)ToAny(value));
        }

        return representation + " }";
    }
}

abstract class EqualityComparer<type T> {
    public bool! Equals(T x, T y) {
        if (x is null || y is null) {
            return false;
        }

        if (x is Object)
            return ToObject(x).Equals(ToObject(y));

        return x! == y!;
    }
}

sealed class KeyNotFoundException extends Exception {
    public constructor() : base("The given key was not present in the dictionary.") { }
}
