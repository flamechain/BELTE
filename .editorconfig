# Top-most EditorConfig file
root = true

[*]
indent_style = space
trim_trailing_whitespace = true
end_of_line = crlf
insert_final_newline = true

# Code files
[*.{cs,blt}]
indent_size = 4
charset = utf-8

# XML project and config files
[*.{xml,yml,csproj,msproj,Build.props,Build.targets,config}]
indent_size = 2

# JSON files
[*.json]
indent_size = 4
insert_final_newline = true

# Text files
[*.txt]
indent_sze = 4

# Documentation files
[*.md]
indent_size = 2

# Makfiles
[Makefile]
indent_style = tab

# Dotnet code style settings
[*.cs]
dotnet_naming_style.camel_case_style.capitalization = camel_case
# Sort using directives with System.* appearing first
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false
# Avoid "this." is unnecessary
dotnet_style_qualification_for_field = false:refactoring
dotnet_style_qualification_for_property = false:refactoring
dotnet_style_qualification_for_method = false:refactoring
dotnet_style_qualification_for_event = false:refactoring
# Prefer language keywords over framework type names
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning
# Suggest more modern language features when available
dotnet_style_object_initializer = true:warning
dotnet_style_collection_initializer = true:warning
dotnet_style_coalesce_expression = true:warning
dotnet_style_null_propagation = true:warning
dotnet_style_explicit_tuple_names = true:warning

dotnet_style_allow_multiple_blank_lines_experimental = false

# Static fields are PascalCase
dotnet_naming_rule.static_fields_should_be_pascal_case.severity = warning
dotnet_naming_rule.static_fields_should_be_pascal_case.symbols = static_fields
dotnet_naming_rule.static_fields_should_be_pascal_case.style = static_field_style

dotnet_naming_symbols.static_fields.applicable_kinds = field
dotnet_naming_symbols.static_fields.applicable_accessibilities = *
dotnet_naming_symbols.static_fields.required_modifiers = static

dotnet_naming_style.static_field_style.capitalization = pascal_case

# Non-private readonly fields are camelCase
dotnet_naming_rule.non_private_readonly_fields_should_be_camel_case.severity = warning
dotnet_naming_rule.non_private_readonly_fields_should_be_camel_case.symbols = non_private_readonly_fields
dotnet_naming_rule.non_private_readonly_fields_should_be_camel_case.style = non_private_readonly_field_style

dotnet_naming_symbols.non_private_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_readonly_fields.applicable_accessibilities = public, internal
dotnet_naming_symbols.non_private_readonly_fields.required_modifiers = readonly

dotnet_naming_style.non_private_readonly_field_style.capitalization = camel_case

# Non-private static readonly fields are PascalCase
dotnet_naming_rule.non_private_static_readonly_fields_should_be_pascal_case.severity = warning
dotnet_naming_rule.non_private_static_readonly_fields_should_be_pascal_case.symbols = non_private_static_readonly_fields
dotnet_naming_rule.non_private_static_readonly_fields_should_be_pascal_case.style = non_private_static_readonly_field_style

dotnet_naming_symbols.non_private_static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_static_readonly_fields.applicable_accessibilities = public, internal
dotnet_naming_symbols.non_private_static_readonly_fields.required_modifiers = readonly, static

dotnet_naming_style.non_private_static_readonly_field_style.capitalization = pascal_case

# Constants are PascalCase
dotnet_naming_rule.constants_should_be_pascal_case.severity = warning
dotnet_naming_rule.constants_should_be_pascal_case.symbols = constants
dotnet_naming_rule.constants_should_be_pascal_case.style = constant_style

dotnet_naming_symbols.constants.applicable_kinds = field, local
dotnet_naming_symbols.constants.required_modifiers = const

dotnet_naming_style.constant_style.capitalization = pascal_case

# Non-private instance fields are camelCase
dotnet_naming_rule.non_private_instance_fields_should_be_camel_case.severity = warning
dotnet_naming_rule.non_private_instance_fields_should_be_camel_case.symbols = non_private_instance_fields
dotnet_naming_rule.non_private_instance_fields_should_be_camel_case.style = non_private_instance_field_style

dotnet_naming_symbols.non_private_instance_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_instance_fields.applicable_accessibilities = public, internal

dotnet_naming_style.non_private_instance_field_style.capitalization = camel_case

# Private instance fields are camelCase and start with _
dotnet_naming_rule.private_instance_fields_should_be_camel_case.severity = warning
dotnet_naming_rule.private_instance_fields_should_be_camel_case.symbols = private_instance_fields
dotnet_naming_rule.private_instance_fields_should_be_camel_case.style = private_instance_field_style

dotnet_naming_symbols.private_instance_fields.applicable_kinds = field
dotnet_naming_symbols.private_instance_fields.applicable_accessibilities = private, protected, protected_internal, private_protected

dotnet_naming_style.private_instance_field_style.capitalization = camel_case
dotnet_naming_style.private_instance_field_style.required_prefix = _

# Local and parameters are camelCase
dotnet_naming_rule.locals_should_be_camel_case.severity = warning
dotnet_naming_rule.locals_should_be_camel_case.symbols = locals_and_parameters
dotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style

dotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local

# Local functions are PascalCase
dotnet_naming_style.local_function_style.capitalization = pascal_case
dotnet_naming_rule.local_functions_should_be_pascal_case.severity = warning
dotnet_naming_rule.local_functions_should_be_pascal_case.symbols = local_functions
dotnet_naming_rule.local_functions_should_be_pascal_case.style = local_function_style

dotnet_naming_symbols.local_functions.applicable_kinds = local_function

# Non-private properties are camelCase
dotnet_naming_rule.non_private_properties_must_be_camel_case.severity = warning
dotnet_naming_rule.non_private_properties_must_be_camel_case.symbols = non_private_properties
dotnet_naming_rule.non_private_properties_must_be_camel_case.style = non_private_properties_style

dotnet_naming_symbols.non_private_properties.applicable_kinds = property
dotnet_naming_symbols.non_private_properties.applicable_accessibilities = public, internal

dotnet_naming_style.non_private_properties_style.capitalization = camel_case

# Private properties are camelCase and start with _
dotnet_naming_rule.private_properties_must_be_camel_case.severity = warning
dotnet_naming_rule.private_properties_must_be_camel_case.symbols = private_properties
dotnet_naming_rule.private_properties_must_be_camel_case.style = private_properties_style

dotnet_naming_symbols.private_properties.applicable_kinds = property
dotnet_naming_symbols.private_properties.applicable_accessibilities = private, protected, protected_internal, private_protected

dotnet_naming_style.private_properties_style.capitalization = camel_case
dotnet_naming_style.private_properties_style.required_prefix = _

# Static properties are PascalCase
dotnet_naming_rule.static_properties_must_be_camel_case.severity = warning
dotnet_naming_rule.static_properties_must_be_camel_case.symbols = static_properties
dotnet_naming_rule.static_properties_must_be_camel_case.style = static_properties_style

dotnet_naming_symbols.static_properties.applicable_kinds = property
dotnet_naming_symbols.static_properties.applicable_accessibilities = *
dotnet_naming_symbols.static_properties.required_modifiers = static

dotnet_naming_style.static_properties_style.capitalization = pascal_case

# By default, name items with PascalCase
dotnet_naming_rule.members_should_be_pascal_case.severity = warning
dotnet_naming_rule.members_should_be_pascal_case.symbols = all_members
dotnet_naming_rule.members_should_be_pascal_case.style = pascal_case_style

dotnet_naming_symbols.all_members.applicable_kinds = *

dotnet_naming_style.pascal_case_style.capitalization = pascal_case

file_header_template = Copyright (c) Ryan Wilson and contributors. All rights reserved.\nLicensed under the MIT license. See the LICENSE file in the project root for more information.

# C# code style settings
[*.cs]
# Newline settings
csharp_new_line_before_open_brace = none
csharp_new_line_before_else = false
csharp_new_line_before_catch = false
csharp_new_line_before_finally = false
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left

# Whitespace options
csharp_style_allow_embedded_statements_on_same_line_experimental = true
dotnet_diagnostic.IDE2001.severity = warning
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = false
dotnet_diagnostic.IDE2002.severity = warning
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = false
dotnet_diagnostic.IDE2004.severity = warning
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = false
dotnet_diagnostic.IDE2005.severity = warning
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = false
dotnet_diagnostic.IDE2006.severity = warning

# Prefer "var"
dotnet_diagnostic.IDE0007.severity = warning
csharp_style_var_for_built_in_types = true:warning
csharp_style_var_when_type_is_apparent = true:warning
csharp_style_var_elsewhere = true:warning

# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = false:none

# Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_inlined_variable_declaration = true:warning
csharp_style_throw_expression = true:warning
csharp_style_conditional_delegate_call = true:warning
csharp_style_prefer_extended_property_pattern = true:warning

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = do_not_ignore
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Blocks are allowed
csharp_prefer_braces = true:silent
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true

# IDE0001: Simplify name
dotnet_diagnostic.IDE0001.severity = warning

# IDE0002: Simplify name
dotnet_diagnostic.IDE0002.severity = warning

# IDE0003: Simplify name
dotnet_diagnostic.IDE0003.severity = warning

# IDE0005: Unnecessary using
dotnet_diagnostic.IDE0005.severity = warning

# IDE0011: Add braces
csharp_prefer_braces = when_multiline:warning
dotnet_diagnostic.IDE0011.severity = warning

# IDE0034: Simplify default
dotnet_diagnostic.IDE0034.severity = warning

# IDE0040: Add accessibility modifiers
dotnet_diagnostic.IDE0040.severity = warning

# IDE0044: Make field readonly
dotnet_diagnostic.IDE0044.severity = warning

# IDE0047: Remove parenthesis
dotnet_diagnostic.IDE0047.severity = warning

# IDE0051: Unused private member
dotnet_diagnostic.IDE0051.severity = warning

# IDE0052: Remove unread private member
dotnet_diagnostic.IDE0052.severity = warning

# IDE0059: Unnecessary assignment to a value
dotnet_diagnostic.IDE0059.severity = warning

# IDE0060: Remove unused parameter
dotnet_diagnostic.IDE0060.severity = warning

# IDE0063: Simplify using
dotnet_diagnostic.IDE0063.severity = warning

# IDE0066: Use switch expression
dotnet_diagnostic.IDE0066.severity = warning

# IDE0090: Simplify new expression
dotnet_diagnostic.IDE0090.severity = none

# IDE0170: Prefer extended property pattern
dotnet_diagnostic.IDE0170.severity = suggestion

# RS0100: Statements must be placed on their own line
dotnet_diagnostic.RS0100.severity = none

# RS0102: Braces must not have blank lines between them
dotnet_diagnostic.RS0102.severity = none

# CA1012: Abstract types should not have public constructors
dotnet_diagnostic.CA1012.severity = warning

# CA1822: Make member static
dotnet_diagnostic.CA1822.severity = suggestion

# CA1847: Use char if possible
dotnet_diagnostic.CA1847.severity = warning
