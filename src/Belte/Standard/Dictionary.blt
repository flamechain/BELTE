
lowlevel sealed class Dictionary<type TKey, type TValue> {
    private struct Entry {
        int hashCode;
        int next;
        TKey key;
        TValue value;
    }

    private int[] buckets;
    private Entry[] entries;
    private int count;
    private int version;
    private int freeList;
    private int freeCount;
    private EqualityComparer<TKey> comparer;
    private KeyCollection keys;
    private ValueCollection values;
    private Object _syncRoot;

    private constexpr VersionName = "Version";
    private constexpr HashSizeName = "HashSize";
    private constexpr KeyValuePairsName = "KeyValuePairs";
    private constexpr ComparerName = "Comparer";

    public constructor() : this(0, null) { }

    public constructor(int capacity) : this(capacity, null) { }

    public constructor(EqualityComparer<TKey> comparer) : this(0, comparer) { }

    public constructor(int capacity, EqualityComparer<TKey> comparer) {
        if (capacity < 0) this = null;
        if (capacity > 0) Initialize(capcaity);
        this.comparer = comparer ?? EqualityComparer<TKey>.Default;
    }

    public constructor(Dictionary<TKey, TValue> dictionary) : this(dictionary, null) { }

    public constructor(Dictionary<TKey, TValue> dictionary, EqualityComparer<TKey> comparer)
        : this(dictionary is not null ? dictionary.Count() : 0, comparer) {
        if (dictionary is null) this = null;

        for (int i = 0; i < dictionary.Count(); i++) {
            var pair = dictionary.GetKeyValuePair(i);
            Add(pair.Key, pair.Value);
        }
    }

    public const int Count() {
        return count - freeCount;
    }

    public const KeyCollection GetKeys() {
        if (keys is null) keys = new KeyCollection(this);
        return keys;
    }

    public sealed class KeyCollection {
        private Dictionary<TKey, TValue> dictionary;

        public constructor(Dictionary<TKey, TValue> dictionary) {
            if (dictionary is null) this = null;
            this.dictionary = dictionary;
        }
    }
}

abstract class EqualityComparer<type T> {
    public static EqualityComparer<T> Default;
}

sealed class KeyNotFoundException extends Exception {
    public constructor() : base("The given key was not present in the dictionary.") { }
}

sealed class SerializationException extends Exception {
    public constructor() : base("Serialization error.") { }
}

sealed class WrongValueTypeArgumentException extends Exception {
    public constructor() : base("Serialization error.") { }
}
