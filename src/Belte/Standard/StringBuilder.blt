
lowlevel class StringBuilder {
    char[] _array;
    int! _length;
    int! _res;

    StringBuilder() {
        _TidyInit();
    }

    StringBuilder(int! length) {
        _array = new char[length];
        _length = 0;
        _res = length;
    }

    StringBuilder(char[] string_) {
        _TidyInit();
        _ConstructContents(string_, Length(string_)!);
    }

    StringBuilder(String string_) {
        _TidyInit();
        _ConstructContents(string_._array, string_._length);
    }

    void Append(char value) {
        if (_res > _length) {
            _array[_length] = value;
            _length++;
            return;
        }

        int! newCapacity = _length + 10;
        char[] newArray = new char[newCapacity];
        _CopyInto(ref newArray, ref _array, 0, _length);
        _array = newArray;

        _length++;
        _res = newCapacity;
    }

    void Append(String value) {
        if (_res > _length + value._length) {
            _CopyInto(ref _array, ref value._array, _length, value._length);
            _length += value._length;
            return;
        }

        int! newCapacity = _length + value._length + 10;
        char[] newArray = new char[newCapacity];
        _CopyInto(ref newArray, ref _array, 0, _length);
        _CopyInto(ref newArray, ref value._array, _length, value._length);
        _array = newArray;

        _length += value._length;
        _res = newCapacity;
    }

    void Pop() {
        if (_length > 0)
            _length--;
    }

    void Clear() {
        _length = 0;
    }

    void Assign(int! index, char value) {
        index = _PosIndex(index);

        if (index == _length) {
            Append(value);
            return;
        } else if (index > _length) {
            return;
        }

        _array[index] = value;
    }

    const int Length() {
        return _length;
    }

    const char[] ToArray() {
        char[] copy = new char[_length];
        _CopyInto(ref copy, ref _array, 0, _length);
        return copy;
    }

    const String ToString() {
        return new String(_array);
    }

    const char Index(int! index) {
        index = _PosIndex(index);

        if (index < 0 || index >= _length) {
            return null;
        }

        return _array[index];
    }

    const StringBuilder Substring_(int! start, int! end = -1) {
        start = _PosIndex(start);
        end = _PosIndex(end);

        if (end <= start) {
            return new StringBuilder();
        }

        StringBuilder subset = new StringBuilder(end - start);

        for (int! i = start; i < end; i++) {
            subset.Append(_array[i]);
        }

        return subset;
    }

    static char operator[](StringBuilder builder, int index) {
        if (index is null)
            return null;

        return builder.Index(index!);
    }

    static char operator[](StringBuilder builder, int index, char value) {
        if (index is null)
            return null;

        builder.Assign(index!, value);
        return builder.Index(index!);
    }

    void _TidyInit() {
        _array = new char[10];
        _length = 0;
        _res = 10;
    }

    void _ConstructContents(char[] array, int! length) {
        if (_res > length) {
            _CopyInto(ref _array, ref array, 0, length);
            _length = length;
            return;
        }

        int! newCapacity = length + 10;
        _array = new char[newCapacity];
        _CopyInto(ref _array, ref array, 0, length);

        _length = length;
        _res = newCapacity;
    }

    const int! _PosIndex(int! index) {
        if (index < 0) {
            index += _length;
        }

        return index;
    }

    static void _CopyInto(ref char[] to, ref char[] from, int! start, int! length) {
        for (int! i = 0; i < length; i++) {
            to[i + start] = from[i];
        }
    }
}
