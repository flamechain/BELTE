
namespace CommandLine {
    public static class CmdLine {
        const int SuccessExitCode = 0;
        const int ErrorExitCode = 1;
        const int FatalExitCode = 2;

        const string[] AllowedOptions = {
            // "error", "ignore", "all"
        };

        public static int Main(string[] args) {
            int error;
            Compiler compiler = new Compiler();
            compiler.me = args.RemoveAt(0);
            compiler.state = DecodeOptions(
                args, out DiagnosticQueue diagnostics, out bool showHelp, out bool showMachine, out bool showVersion);

            ResolveOutputFiles(compiler);
            ResolveInputFiles(compiler);
            compiler.diagnostics.Move(diagnostics);

            if (showHelp || showVersion || showMachine) compiler.diagnostics.Clear(DiagnosticType.Fatal);
            error = ResolveDiagnostics(compiler);

            if (showMachine)
                ShowMachineDialog();
            if (showVersion)
                ShowVersionDialog();
            if (showHelp)
                ShowHelpDialog();

            if (showMachine || showVersion || showHelp)
                return SuccessExitCode;
            if (err > 0)
                return err;

            // only mode that doesn't go through one-time compilation
            if (compiler.state.buildMode == BuildMode.Repl) {
                BuckleRepl repl = new BuckleRepl(compiler, ResolveDiagnostics);
                repl.Run();

                return SuccessExitCode;
            }

            compiler.Compile();
            err = ResolveDiagnostics(compiler);
            if (err > 0)
                return err;

            ResolveCompilerOutput(compiler);
            return SuccessExitCode;
        }
    }
}
