$BU0001
The compiler produces this warning if it can tell that an expression will always
result in the same value.

For example:

```
if (2 > 0) { } // 2 > 0 is always true
```
$BU0002
Inside a global scope without a `Main` function, the compiler will run the
file top-down instead. Return statements are allowed in this case, however it is
currently unsupported to return a value in this case.

For example:

```
if (2 == 2)
    return; // this is allowed
else
    return 3; // this is not allowed
```
$BU0003
The compiler produces this error when it either can't find a reference, or it is
the wrong file type. This usually means that a reference specified on the command
line is in a different location.

For example:

```
$ buckle --ref=some/fake/reference.dll // correct format, but doesn't exist
```
$BU0004
When the compiler fails to parse a literal it produces this error.

For example:

```
int myInt = 9999999999; // exceeds integer limit, cannot parse
```
$BU0005
When the compiler is given an unhandled character when scanning the input files,
it produces this error.

For example:

```
@ // the compiler does not currently handle this character
```
$BU0006
When the compiler expects a certain piece of text, and does not find it, this error
is produced.

For example:
```
if (true { } // the compiler expected a closing parenthesis before the open bracket
```
$BU0007
Some casts are implied, but others must be explicitly specified. When an explicit
cast is not specified explicitly, this error is produced.

For example:

```
decimal myDecimal = 4; // implicit cast from integer to decimal, allowed
int myInt = 3.4; // explicit cast from decimal to integer, produces error
```

When possible the compiler will give a suggestion on how to make the cast explicit.
$BU0008
When a unary operator is used with unsupported types, this error is produced.

For example:

```
int myInt = ~4; // ~ is allowed for integer types
decimal myDecimal = ~3.4; // but not for decimal types
```
$BU0009
When the compiler fails to resolve a builtin type when assembling, it produces
this error. This happens when it cannot find the builtin type. If this happens
the build is probably broken.
$BU0010
When the compiler fails to resolve a builtin type when assembling, it produces
this error. This happens when it finds multiple types for a singular builtin
type. If this happens the build is probably broken.
$BU0011
When a binary operator is used with unsupported types, this error is produced.

For example:

```
int myInt = 3 + 4; // + is allowed for two integers
bool myBool = true + 3; // but not for a boolean and an integer
```
$BU0012
Without a `Main` function, the compiler will run files top-down. However when
compiling multiple files, it becomes ambiguous which file to run first.
Because of this, only one file can contain global statements.
$BU0013
When a function is declared with multiple parameters of the same name, it
becomes ambiguous when referencing parameters. Because of this, each parameter
must have a unique name, even if they are different types.

For example:

```
int MyFunction(int myParam, bool myParam) { } // not allowed because both parameters have the same name
```
$BU0014
`Main` can only return void, or an integer. If a `Main` function is declared
with any other return type this error is produced.

For example:

```
string Main() { } // `Main` cannot return strings
```
$BU0015
When the compiler fails to resolve certain functions when assembling, it produces
this error. This happens when the function cannot be found. If this happens the
build is probably broken.
$BU0016
When a `Main` function is not declared, files are run top-down. However if a `Main`
function is declared, global statements are not allowed.

For example:

```
PrintLine("Hello, world!"); // not allowed, because `Main` is where execution starts

void Main() { }
```
$BU0017
When a symbol is referenced and it cannot be found, the compiler produces this error.

For example:

```
int myInt = 3 + myOtherInt; // `myOtherInt` was never declared, so this is not allowed
```
$BU0018
Functions in the same scope have to have unique names. When an attempt is made to
declare a function with a name already used, the compiler produces this error.
This is to make sure there is no ambiguity when calling functions.

For example:

```
void MyFunction() { } // `MyFunction` has not been declared in this scope, allowed

void MyFunction() { } // `MyFunction` has already been declared, not allowed
```
$BU0019
To prevent undefined behavior, all functions must return in all scenarios if they
have a non-void return type. The compiler checks this, and raises an error of any
code path does not return.

For example:

```
int MyFunction(int myParam) {
    if (myParam > 3)
        return myParam + 1;
    // if `myParam` is not greater than 3 this function does not return, not allowed
}
```
$BU0020
If a cast is not specified between two types, the compiler produces this error.

For example:

```
int[] myCollection = (int[])"test"; // cannot cast from string to integer collection
```
$BU0021
Variables in the same scope have to have unique names. When an attempt is made to
declare a variable with a name already used, the compiler produces this error.
This is to make sure there is no ambiguity when referencing variables.

For example:

```
var myVar; // `myVar` has not been declared in this scope, allowed
var myVar; // `myVar` has already been declared, not allowed
```

However if they are in separate scopes this is allowed.

For example:

```
var myVar;

void MyFunction() {
    var myVar; // `myVar` has not been declared in this scope, allowed
}
```

In this case, the most nested declaration gets priority in the most nested scope.
If `myVar` was referenced in `MyFunction` it would not use the outer declaration,
but rather the one nested inside `MyFunction`. This applies even if the variables
have different types.
$BU0022
Constants can only be defined once, when they are declared. This means that you
cannot change their value after their initial definition. When an attempt is made
to redefine a constant, the compiler produces this error.

For example:

```
const int myConst = 4; // initial definition, allowed and required
myConst = 5; // redefinition, not allowed
```
$BU0023
Because of the way if-statements are parsed, they can become ambiguous. The compiler
produces this error to try and prevent some ambiguity.

For example:

```
if (true)
    if (true) ;
    else ;
```

This could be written as:

```
if (true)
    if (true) ;
else ;
```

Because whitespace is ignored by the compiler, these do the same thing. However
they appear like they should execute differently from each other. In the first
example the else-clause seems to belong to the inner if-statement, however in
the second example it seems to belong to the outer if-statement.

Whenever there is an if-statement that contains an if-statement instead of a
block-statement for its body, and the inner if-statement has an else-clause
without using blocks, the compiler produces this error.
$BU0024
Void is used to denote that a function is actually a procedure that returns no
value. If void is used in most other scenarios, the compiler produces this error.

For example:

```
void MyFunction() { } // allowed

void myVar; // not allowed
```
$BU0025
Indexing allows retrieving elements from a collection. However, indexing is only
allowed on collection types. The compiler produces this error when indexing is used
on any other type.

For example:

```
int[] myCollection = {1, 2, 3};
int myInt = myCollection[2]; // `myCollection` is a collection type, so this is allowed
iny mySecondInt = myInt[1]; // `myInt` is not a collection type, so this is not allowed
```
$BU0026
When the compiler detects unreachable code, it will produce this warning. This is
not an error because the compiler will continue the compilation process, removing
the unreachable code from the assembly.

For example:

```
if (true) {
    int myInt = 2;
} else {
    int myInt = 3; // true is always true, so this else-clause can never execute
}
```
$BU0027
Every string is started with a double-quote and ended the same way. If the ending
quote is missing, the compiler does not know when the string ends. In that case
this error is produced.

For example:

```
string myString = "Hello, world!
int myInt = 2; // the string was never terminated, this statement is part of the string
```
$BU0028
A functions must have a declaration, so when a function without a declaration is
called, the compiler does not know what function is being referenced. In this
case the compiler produces this error.

For example:

```
int myInt = MyFunction(); // `MyFunction` does not exist in this scope, not allowed
```
$BU0029
