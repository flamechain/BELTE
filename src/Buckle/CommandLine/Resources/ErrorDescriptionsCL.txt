$CL0001
The '-o' command-line option requires a filename. If
no filename is provided then this error is raised.

The '-o' is used to specifically tell the compiler where to put any single
output file (of any file type) instead of having the compiler guess.

For example:

```
buckle -i Program.blt -o // Incorrect, no filename is provided
buckle -i Program.blt -o Program.exe // Correct
```
$CL0002
The '--explain' command-line option is used to explain errors, and only one
error can be explained at a time so this option can only be specified once.

However, if you are reading this that means you fixed the error so you don't
really need an example, do you? Here is one anyway:

```
buckle --explain CL0002 --explain CL0003 // Incorrect, the `--explain` option is specified twice
buckle --explain CL0002 // Correct
```
$CL0003
The '--explain' command-line option requires an error code as it explains a
single error in depth. This means that without an error code it cannot perform,
so this error is raised.

However, if you are reading this that means you fixed the error so you don't
really need an example, do you? Here is one anyway:

```
buckle --explain // Incorrect, no error code is provided
buckle --explain CL0003 // Correct
```
$CL0004
The '--modulename' command-line option requires a name to use as a module name
while emitting to a .NET executable. This means the option is only relevant
while compiling for .NET. Without a name, it cannot perform its action, so this
error is raised.

For example:

```
buckle -d Program.blt --modulename // Incorrect, no name is provided
buckle -d Program.blt --modulename=Program // Correct
```

It is important to note that almost all of the time compilation can happen
without the user specifying a custom module name, so this option should only be
used when necessary.
$CL0005
The '--ref' command-line option requires a path to a .NET reference to include
in the compilation (so .NET libraries can be used). Without a path, it cannot
perform its action, so this error is raised.

For example:

```
buckle -d Program.blt --ref // Incorrect, no path is provided
buckle -d Program.blt --ref=Path/To/System.Console.dll // Correct
```

It is important to note that 'System.Console.dll', 'System.Runtime.dll', and
'System.Runtime.Extensions.dll' are always included references, so they do not
need to be added manually. 'System.Console.dll' was purely used as an example.
$BU0006
When the compiler attempts to read the files passed on the command line and
fails, this error is produced. This is most likely due to another process using
the file, so a common way to fix this error is to just retry. If that does not
fix the issue, double check the file passed is unlocked. If the problem
persists, submit a bug report.
$CL0007
The '--severity' command-line option is used to tell the compiler which
diagnostics to report.

Because of how this option works, it requires an severity name after the
'--severity'. If no severity name is given, this error is raised.

For example:

```
buckle -i Program.blt --severity // Incorrect, no severity name is provided
buckle -i Program.blt --severity=all // Correct
```
$CL0008
The '--severity' command-line option has a predefined set of known severities.
If a severity is provided that the compiler does not recognize, this error is
raised.

For example:

```
buckle -i Program.blt --severity=suggestion // Incorrect, `suggestion` is not a known severity
```

Reference the Belte docs to learn more about what severities '--severity'
supports.
$CL0009
If an unknown option is provided to the command line, instead of ignoring it the
compiler raises an error to let the user know. Usually, this error is the result
of a typo.

For example:

```
buckle -i Program.blt --release // Incorrect, `--release` is not a known option
```

For more information on what options are supported, try 'buckle --help' or visit
the Belte docs.
$CL0010
When invoking the Repl (by using the '-r' option), the compiler ignores all
other command-line options. The other options are still checked if they are
valid for logging purposes, but they do not prevent the Repl from being called.

For example:

```
buckle -fakeOption NotAFile.blt -Wfake -r
```

This would successfully call the Repl, but multiple errors would be logged.
$CL0011
Certain options are used to tell the compiler when to stop compilation
explicitly, instead of just doing the default full compilation. These options
include '-p', '-s', '-c', and '-t'. All of these options assume the compiler is
compiling to a native assembly, so they are irrelevant if interpreting or .NET
compiling. If the compiler is compiling with .NET integration and any of these
options are provided, this error is raised.

For example:

```
buckle -d Program.blt -c // Incorrect, cannot specify `-c` while compiling with .NET integration (`-d`)
```
$CL0012
Command-line options like '-p', '-s', and '-c' tell compilation when to stop.
All of these stop at a stage where if multiple input files are provided,
multiple files with be outputted. Thus specifying an output file with '-o' is
irrelevant and this error is raised. This also applies to the '-t' option which
tells the compiler to transpile into C#.

For example:

```
buckle Program.blt MyLib.blt -c -o Program.o // Incorrect, `-o` is not allowed with `-c` and multiple input files
```

However, if only one input file is provided this error cannot be raised.
$CL0013
If interpreting (by using the '-i' command-line option), then the file is
compiled and evaluated immediately. (Note that this is not technically
interpreting, but has the same result.) Because of this, no output file is
created making the '-o', '-c', '-p', '-s', and '-t' options irrelevant. If
interpreting and any of these options are provided this error is
raised.

For example:

```
buckle -i Program.blt -o Program.exe // Incorrect
buckle -i Program.blt -c -o Program.exe // Incorrect
buckle -i Program.blt -s // Incorrect
```
$CL0014
The '--modulename' command-line option specifies a custom module name to use while emitting
with .NET integration. Because that is the only time the module name is used, it
becomes irrelevant if the compiler is not compiling with .NET integration. If
the '--modulename' option is provided and the compiler is not compiling with
.NET integration ('-d') this error is raised.

For example:

```
buckle -i Program.blt --modulename=CustomName // Incorrect, not compiling with .NET integration
buckle -d Program.blt --modulename=CustomName // Correct
```
$CL0015
The '--ref' command-line option specifies .NET references to include while
emitting. Because these references are only used while emitting for .NET, they
become irrelevant otherwise. If any references are provided and the compiler is
not compiling with .NET integration, this error is raised.

For example:

```
buckle -i Program.blt --ref=Path/To/System.Console.dll // Incorrect, not compiling with .NET integration
buckle -d Program.blt --ref=Path/To/System.Console.dll // Correct
```

It is important to note that 'System.Console.dll', 'System.Runtime.dll', and
'System.Runtime.Extensions.dll' are always included references, so they do not
need to be added manually. 'System.Console.dll' was purely used as an example.
$CL0016
Unless invoking the Repl (by using the '-r' command-line option), input files
are needed to compile, as that is what is being compiled. Without them, the
compiler has nothing to compile and cannot be invoked. If that is the case,
this error is raised.

The command line can also take a directory name and every file in that
directory will be included (non-recursive).

For example:

```
buckle // Incorrect, no input files
buckle Program.blt // Correct
buckle Program.blt MyLib.blt MyOtherFile.blt // Correct
buckle MyFolder // Correct
```
$CL0017
If a file or directory provided on the command line to compile cannot be found
(either absolutely or relatively), then this error is raised.

For example:

```
buckle ANonExistentFile.blt // Incorrect, assuming that this file does not exist
```
$CL0018
If a file is provided to the compiler that has an unsupported file extension, it
is ignored and is not compiled. This raises this warning. This is a warning as
if a directory is provided and it contains unknown files, the compiler should
continue with the files it can handle (this allows files such as READMEs to be
allowed inside these directories).

For a full list of supported file extensions, visit the Belte docs.

For example:

```
buckle -i Program.blt MyLib.dll // This will compile, but `MyLib.dll` is ignored for compilation resulting in this warning
```

If all files provided result in this warning, then the compiler has no input
files to compile and will raise CL0016.
$CL0019
When using the '--explain' command-line option, an error code needs to be
provided. The error code needs to be in the format [BU|CL|RE]<code> to work.

- BU: Errors and warnings related/produced by the compilation process
- CL: Errors and warnings related/produced by the command-line
- RE: Errors and warnings related/produced by the Repl

The <code> can be any 4-digit integer. Whenever an error or warning is produced,
it records its error code so the user can then later use the '--explain' option.

For example:

```
Program.blt:1:18: error BU0052: cannot assign `null` to a non-nullable variable
    int! a = null;
             ^~~~
```

In this error message, the code is provided (BU0052). You could then do:

```
buckle --explain BU0052
```

And you would get information on that error.

If the error message has an invalid prefix or is formatted incorrectly in any
way, this error is produced. If the prefix is missing, it defaults to the 'BU'
prefix, meaning it will show compilation errors.

If the error is formatted correctly but not currently in use, error CL0021 is
raised instead. Errors that have error codes associated with them but are no
longer in use will not be deleted, but rather marked as deprecated when using
the '--explain' option. This is to make sure newer errors do not use the error
codes of older errors in case you are using an older compiler version.
$CL0020
Because this is a compiler, any files that are already in their compiled form
(usually executables, *.exe) are ignored completely, and this warning is raised
to tell the user that that is the case.

For example:

```
buckle -d Program.blt MyLib.exe // This will compile, but `MyLib.exe` is ignored for compilation resulting in this warning
```

If all files provided result in this warning, then the compiler has no input
files to compile and will raise CL0016.
$CL0021
The '--explain' command-line option gives information on an error. If the error
code provided is in the correct format, but the code is not currently in use,
this error is raised.

For example:

```
buckle --explain BU6307 // Correct format, but the error code `BU6307` is not currently in use so no information about it exists
```

If the error code is in the incorrect format, then error CL0019 is raised.
$CL0022
The '--script' command-line option interprets the input file as a script.
Because the file is not compiled before running, a proper entry point can not be
deduced before execution. To get around this, execution always starts at the top
of the input file like a script.

To prevent an ambiguous entry point, only one file can be interpreted at a time,
so attempting to specify multiple files at once in junction with the '--script'
option results in this error.
$CL0023
The '--script' command-line option interprets the input file as a script. If the
provided source file is not Belte source code, the interpreter cannot work on
it, and this error is thrown to tell the user that nothing will be executed.
$CL0024
The '--warnlevel' command-line option requires a warning level 0 through 2.

For example:

```
buckle --warnlevel // Incorrect, no warning level is given
buckle --warnlevel=2 // Correct
```
$CL0025
The '--warnlevel' command-line option requires a warning level 0 through 2.

For example:

```
buckle --warnlevel=asdf // Incorrect
buckle --warnlevel=2 // Correct
```
$CL0026
The '--wignore' command-line option requires a warning code(s) to use to ignore
a specific warning(s).

For example:

```
buckle --wignore // Incorrect, no warning code given
buckle --wignore=BU0001 // Correct
buckle --wignore=BU0001,BU0026 // Correct
```
$CL0027
The '--winclude' command-line option requires a warning code(s) to use to
include a specific warning(s).

For example:

```
buckle --winclude // Incorrect, no warning code given
buckle --winclude=BU0001 // Correct
buckle --winclude=BU0001,BU0026 // Correct
```
$CL0028
The '--wignore' and '--winclude' options take in warning codes. If the passed
codes are codes of existing diagnostics but not warnings, this error is raised.

For example:

```
buckle --winclude=BU0005 // Incorrect, `BU0005` is an error not a warning
buckle --winclude=BU0026 // Correct
```
$CL0029
The '--type' command-line option is used to tell the compiler what the project
type is for the given source. It must take in a project type.

For example:

```
buckle Program.blt --type // Incorrect, no project type name is provided
buckle Program.blt --type=console // Correct
buckle Program.blt --type=graphics // Correct
```
$CL0030
A passed project type with the '--type' option must be a recognized project
type.

For example:

```
buckle Program.blt --type=someOtherName // Incorrect, `someOtherName` is not a recognized project type
buckle Program.blt --type=console // Correct
buckle Program.blt --type=graphics // Correct
```
