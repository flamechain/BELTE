$CL0001
The '-o' command-line option requires a filename. If
no filename is provided then this error is raised.

The '-o' is used to specifically tell the compiler where to put any single
output file (of any file type) instead of having the compiler guess.

For example:

```
buckle -i Program.ble -o // Incorrect, no filename is provided
buckle -i Program.ble -o Program.exe // Correct
```
$CL0002
The '--explain' command-line option is used to explain errors, and only one
error can be explained at a time so currently this option can only be specified
once.

However, if you are reading this that means you fixed the error so you don't
really need an example do you? Here is one anyway:

```
buckle --explain CL0002 --explain CL0003 // Incorrect, the '--explain' option is specified twice
buckle --explain CL0002 // Correct
```
$CL0003
The '--explain' command-line option requires an error code as it explains a
single error in depth. This means that without an error code it cannot perform,
so this error is raised.

However, if you are reading this that means you fixed the error so you don't
really need an example do you? Here is one anyway:

```
buckle --explain // Incorrect, no error code is provided
buckle --explain CL0003 // Correct
```
$CL0004
The '--modulename' command-line option requires a name to use as a module name
while emitting to a .NET executable. This means the option is only relevant
while compiling for .NET. Without a name it cannot perform its action, so this
error is raised.

For example:

```
buckle -d Program.ble --modulename // Incorrect, no name is provided
buckle -d Program.ble --modulename=Program // Correct
```

It is important to note that almost all of the time compilation can happen
without the user specifying a custom module name, so this option should only be
used when necessary.
$CL0005
The '--ref' command-line option requires a path to a .NET reference to include
in compilation (so .NET libraries can be used). Without a path it cannot
perform its action, so this error is raised.

For example:

```
buckle -d Program.ble --ref // Incorrect, no path is provided
buckle -d Program.ble --ref=Path/To/System.Console.dll // Correct
```

It is important to note that 'System.Console.dll', 'System.Runtime.dll', and
'System.Runtime.Extensions.dll' are always included references, so they do not
need to be added manually. 'System.Console.dll' was purely used as an example.
$CL0006
The '--entry' command-line option requires a method or function symbol name to
use as an entry point, so without a name it cannot perform its action.

By default, the entry point is a global method symbol named 'Main', but the user
can use this option to specify where to start execution explicitly.

For example

```
buckle -i Program.ble --entry // Incorrect, no symbol name is provided
buckle -i Program.ble --entry=Program.Main // Correct
```
$CL0007
The '-W' command-line option is used to tell the compiler special ways to handle
warnings. This can either be '-Werror' to treat all warnings as errors,
'-Wignore' to ignore all warnings, or '-Wall' to show some hidden warnings and
also to show warnings while interpreting.

Because of how this option works, it requires an option name after the '-W'. If
no option name is given, this error is raised.

For example:

```
buckle -i Program.ble -W // Incorrect, no option name is provided
buckle -i Program.ble -Wall // Correct
```

If multiple options are to be provided, you can choose to comma separate them.
The following examples show two ways to write the same thing:

```
buckle -d Program.ble -Wall,error
buckle -d Program.ble -Wall -Werror
```
$CL0008
The '-W' command-line option has a predefined set of known options. If an option
is provided that the compiler does not recognize, this error is raised.

For example:

```
buckle -i Program.ble -Wextra // Incorrect, 'extra' is not a known warning option
```

Reference the Belte docs to learn more about what options '-W' supports.
$CL0009
If an unknown option is provided to the command-line, instead of ignoring it the
compiler raises an error to let the user know. Usually this error is the result
of a typo.

For example:

```
buckle -i Program.ble --release // Incorrect, '--release' is not a known option
```

For more information on what options are supported, try 'buckle --help' or visit
the Belte docs.
$CL0010
When invoking the REPL (by using the '-r' option), the compiler ignores all
other command-line options. The other options are still checked if they are
valid for logging purposes, but they do not prevent the REPL from being called.

For example:

```
buckle -fakeOption NotAFile.ble -Wfake -r
```

This would successfully call the REPL, but multiple errors would be logged.
$CL0011
Certain options are used to tell the compiler when to stop compilation
explicitly, instead of just doing the default full compilation. These options
include '-p', '-s', and '-c'. All of these options assume the compiler is
compiling to a native assembly, so they are irrelevant if interpreting or .NET
compiling. If the compiler is compiling with .NET integration and any of these
options are provided, this error is raised.

For example:

```
buckle -d Program.ble -c // Incorrect, cannot specify '-c' while compiling with .NET integration ('-d')
```
$CL0012
Command-line options like '-p', '-s', and '-c' tell compilation when to stop.
All of these stop at a stage where if multiple input files are provided,
multiple files with be outputted. Thus specifying an output file with '-o' is
irrelevant and this error is raised.

For example:

```
buckle Program.ble MyLib.ble -c -o Program.o // Incorrect, '-o' is not allowed with '-c' and multiple input files
```

However, if only one input file is provided this error cannot be raised.
$CL0013
If interpreting (by using the '-i' command-line option), then the file is
compiled and evaluated immediately. (Note that this is not technically
interpreting, but has the same result.) Because of this, no output file is
created making the '-o' irrelevant, and the '-c', '-p', and '-s' options become
irrelevant. If interpreting and any of these options are provided this error is
raised.

For example:

```
buckle -i Program.ble -o Program.exe // Incorrect
buckle -i Program.ble -c -o Program.exe // Incorrect
buckle -i Program.ble -s // Incorrect
```
$CL0014
The '--modulename' command-line option specifies a custom module name to use while emitting
with .NET integration. Because that is the only time the module name is used, it
becomes irrelevant if the compiler is not compiling with .NET integration. If
the '--modulename' option is provided and the compiler is not compiling with
.NET integration ('-d') this error is raised.

For example:

```
buckle -i Program.ble --modulename=CustomName // Incorrect, not compiling with .NET integration
buckle -d Program.ble --modulename=CustomName // Correct
```
$CL0015
THe '--ref' command-line option specifies .NET references to include while
emitting. Because these references are only used while emitting for .NET, they
become irrelevant otherwise. If any references are provided and the compiler is
not compiling with .NET integration, this error is raised.

For example:

```
buckle -i Program.ble --ref=Path/To/System.Console.dll // Incorrect, not compiling with .NET integration
buckle -d Program.ble --ref=Path/To/System.Console.dll // Correct
```

It is important to note that 'System.Console.dll', 'System.Runtime.dll', and
'System.Runtime.Extensions.dll' are always included references, so they do not
need to be added manually. 'System.Console.dll' was purely used as an example.
$CL0016
Unless invoking the REPL (by using the '-r' command-line option), input files
are needed to compile, as that is what is being compiled. Without them the
compiler has nothing to compile and cannot be invoked. If that is the case,
this error is raised.

The command-line can also take a directory name, and every file in that
directory will be included (non-recursive).

For example:

```
buckle // Incorrect, no input files
buckle Program.ble // Correct
buckle Program.ble MyLib.ble MyOtherFile.ble // Correct
buckle MyFolder // Correct
```
$CL0017
If a file or directory provided on the command-line to compile cannot be found
(either absolutely or relatively), then this error is raised.

For example:

```
buckle ANonExistentFile.ble // Incorrect, assuming that this file does not exist
```
$CL0018
If a file is provided to the compiler that has an unsupported file extension, it
is ignored and is not compiled. This raises this warning. This is a warning as
if a directory is provided and it contains unknown files, the compiler should
still continue with the files it can handle (this allows files such as READMEs
to be allowed inside these directories).

For a full list of supported file extensions, visit the Belte docs.

For example:

```
buckle -i Program.ble MyLib.dll // This will compile, but 'MyLib.dll' is ignored for compilation resulting in this warning
```

If all files provided result in this warning, then the compiler has no input
files to compile and will raise CL0016.
$CL0019
When using the '--explain' command-line option, an error code needs to be
provided. The error code needs to be in the format [BU|CL|RE]<code> to work.

- BU: Errors and warnings related/produced by the compilation process
- CL: Errors and warnings related/produced by the command-line
- RE: Errors and warnings related/produced by the REPL

The <code> can be any 4 digit integer. Whenever an error or warning is produced,
it records its error code so the user can then later use the '--explain' option.

For example:

```
Program.ble:1:18: error BU0052: cannot assign 'null' to a non-nullable variable
 [NotNull]int a = null;
                  ^~~~
```

In this error message, the code is provided (BU0052). You could then do:

```
buckle --explain BU0052
```

And you would get information on that error.

If the error message is missing a prefix or formatted incorrectly in any way,
this error is produced.

If the error is formatted correctly but not currently in use, error CL0021 is
raised instead.
$CL0020
Because this is a compiler, any files that are already in their compiled form
(usually executables, *.exe) are ignored completely, and this warning is raised
to tell the user that that is the case.

For example:

```
buckle -d Program.ble MyLib.exe // This will compile, but 'MyLib.exe' is ignored for compilation resulting in this warning
```

If all files provided result in this warning, then the compiler has no input
files to compile and will raise CL0016.
$CL0021
The '--explain' command-line option gives information on an error. If the error
code provided is in the correct format, but the code is not currently is use,
this error is raised.

For example:

```
buckle --explain BU6307 // Correct format, but the error code 'BU6307' is not currently in use so no information about it exists
```

If the error code is in the incorrect format, then error CL0019 is raised.
$CL0022
Certain command-line options like '--explain' and '--help' require accessing
text documents for their information. If the installation of Buckle is corrupt
in a way that these files cannot be located by the compiler, then the stored
information cannot be found. This means that these options are disabled.
All other compiler features should still perform correctly.

However, if you are seeing this message it means your installation is not
corrupt (at least regarding these documents), so you should not be worried!