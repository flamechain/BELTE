using Buckle.CodeAnalysis.Symbols;
using Buckle.CodeAnalysis.Syntax;

namespace Buckle.CodeAnalysis.Binding;

/// <summary>
/// Generated by the <see cref="Lowering.Lowerer" />.
/// E.g.
/// <code>
/// goto label if condition
/// </code>
/// </summary>
internal sealed class BoundConditionalGotoStatement : BoundStatement {
    internal BoundConditionalGotoStatement(
        SyntaxNode syntax,
        LabelSymbol label,
        BoundExpression condition,
        bool jumpIfTrue,
        bool hasErrors = false)
        : base(BoundKind.ConditionalGotoStatement, syntax, hasErrors) {
        this.label = label;
        this.condition = condition;
        this.jumpIfTrue = jumpIfTrue;
    }

    internal LabelSymbol label { get; }

    internal BoundExpression condition { get; }

    internal bool jumpIfTrue { get; }
}
