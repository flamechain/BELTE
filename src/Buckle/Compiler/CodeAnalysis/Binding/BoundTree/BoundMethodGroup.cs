using System.Collections.Immutable;
using Buckle.CodeAnalysis.Symbols;
using Buckle.CodeAnalysis.Syntax;
using Buckle.Diagnostics;

namespace Buckle.CodeAnalysis.Binding;

/// <summary>
/// Generated by the compiler, not present in the final tree.
/// </summary>
internal sealed class BoundMethodGroup : BoundExpression {
    internal BoundMethodGroup(
        SyntaxNode syntax,
        string name,
        ImmutableArray<MethodSymbol> methods,
        ImmutableArray<TypeOrConstant> templateArguments,
        Symbol lookupSymbol,
        BelteDiagnostic lookupError,
        BoundMethodGroupFlags flags,
        BoundExpression receiver,
        LookupResultKind resultKind,
        bool hasErrors = false)
        : base(BoundKind.MethodGroup, syntax, null, hasErrors) {
        this.name = name;
        this.methods = methods;
        this.templateArguments = templateArguments;
        this.lookupSymbol = lookupSymbol;
        this.lookupError = lookupError;
        this.flags = flags;
        this.receiver = receiver;
        this.resultKind = resultKind;
    }

    internal string name { get; }

    internal ImmutableArray<MethodSymbol> methods { get; }

    internal ImmutableArray<TypeOrConstant> templateArguments { get; }

    internal Symbol lookupSymbol { get; }

    internal BelteDiagnostic lookupError { get; }

    internal BoundMethodGroupFlags flags { get; }

    internal BoundExpression receiver { get; }

    internal LookupResultKind resultKind { get; }
}
