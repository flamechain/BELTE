$RE0001
The Repl produces this error when an unknown Repl command is invoked. Repl
commands can only be invoked by prefixing their name with a pound ('#'). This
means that any single line submission that starts with a pound will be treated
as if it is a call to a Repl command, and that line will never be treated as
Belte code. A full list of known Repl commands can be viewed at any time by
typing '#help' in the Repl. This will only show known Repl commands in the
version of the Repl that is being run.

Some Repl commands require arguments, and if that is the case different error
codes such as RE0002 and RE0005 will be used to report issues with arguments.

For example:

```
» #hepl // Correct format to invoke a Repl command, but the command 'hepl' does not exist
» #help // Correct
```
$RE0002
The Repl produces this error when a known Repl command is invoked with the
incorrect number of arguments (similar to a method or method call in Belte).
Repl commands vary in how many arguments they have, so the list of all arguments
for all Repl commands can be viewed by invoking the '#help' command.

For example:

```
» #dump // This is a known Repl command but requires one argument (symbol name)
```
$RE0003
When using the '#dump' Repl command, the user must pass in the name of a symbol.
If the symbol name passed could not be found in the global scope (of any
submission) then the Repl raises with error. If a full method signature is
passed instead of just a symbol name, the error code RE0006 is used instead.

For example:

```
loaded 0 submissions
» int x = 3;
» #dump y // Correct format, but the only symbol currently in the global scope is 'x' making this symbol unknown
» #dump x // Correct
```
$RE0004
When using the '#load' Repl command, the user must pass the path to a file.
If the file could not be located (either relatively or absolutely) then the Repl
raises this error.

For example:

```
» #load someNonexistentFile // Correct format, but assuming this file does not exist this error would be raised
```
$RE0005
When using a Repl command, all arguments are passed as strings. If an argument
fails to parse into its predefined type then this error is raised.

For example:

```
» #saveToFile myString // Correct format, but '#saveToFile' expects an integer to this argument is invalid
» #saveToFile 4 // Correct
```
$RE0006
When using the '#dump' Repl command, the user can either pass in just a symbol
name or a full method signature. If the name of the symbol or method is
unknown, the Repl raises an error. If just a symbol name is passed, then the
error code RE0003 is used. If it was a method signature, then this error code
is used instead. This error is raised even if the method name exists but any
part of the signature is off.

For example:

```
loaded 0 submissions
» void myFunc(int a) { }
» #dump myFunction(int) // Correct format, but 'myFunction' does not exist in the global scope
» #dump myFunc(string) // The method name is correct, but the signature is incorrect making this not exist in the global scope
» #dump myFunc(int) // Correct
```
$RE0007
When using the '#dump' Repl command, the user can pass a symbol name. If this
symbol name refers to an overloaded method and the name is ambiguous between
more than one overload, then this error is raised. This makes sure the user is
seeing the method body they expect and not just the first one the Repl finds.

For example:

```
loaded 0 submissions
» void myFunc(int a, string a) { }
» void myFunc(string a) { }
» #dump myFunc // The Repl cannot tell which overload to show, so it raises this error
```

To avoid this error, use a partial method signature instead of just the name.
Note that this signature is picky, so make sure to not include the return type,
and do not provide parameter names. Putting any whitespace will make the Repl
think you are providing more than 1 argument, so strip any whitespace:

```
» #dump myFunc(int,string) // Correct, no error
» #dump myFunc(string) // Correct, no error
» #dump myFunc(int, string) // Incorrect, no whitespace is allowed
» #dump void myFunc(int,string) // Incorrect, no whitespace is allowed and there should not be a return type
```
$RE0008
While the '#showIL' Repl toggle is active, submissions cannot reference locals
or globals from previous submissions. This may be possible in the future, but
currently the IL emitter used to generate the IL cannot see previous locals and
globals.

For example:

```
» #showIL
IL visible
» int myInt = 3;
» int myOtherInt = myInt + 5; // Not allowed, referencing `myInt` which is a global from a previous submission
```

To work around this limitation, the submissions would need to be combined:

```
» #showIL
IL visible
» int myInt = 3;
· int myOtherInt = myInt + 5; // Allowed, `myInt` is apart of this submission
```
