{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Belte",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#storage"
		},
		{
			"include": "#constant"
		},
		{
			"include": "#entity"
		},
		{
			"include": "#variable"
		},
		{
			"include": "#comment"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.control.belte",
				"match": "\\b(if|else|while|for|return|yield|switch|case|default|break|continue)\\b"
			}, {
				"name": "keyword.other.belte",
				"match": "\\b(include|operator|get|set|this|auto)\\b"
			}, {
				"name": "keyword.operator.arithmetic.belte",
				"match": "\\b(/|\\*|(\\*\\*)|\\+|\\-|\\%)\\b"
			}, {
				"name": "keyword.operator.logical.belte",
				"match": "(&&|\\|\\||!)"
			}, {
				"name": "keyword.preprocessor.belte",
				"match": "^\\s*(\\#\\s*(define|pragma|undef|if|elif|else|end|warning|error))\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.belte",
			"begin": "(\\\")|(\\$\\\")",
			"end": "\\\"",
			"patterns": [{
				"name": "constant.character.escape.belte",
				"match": "\\\\."
			}, {
				"name": "meta.interpolation.belte",
				"match": "(?<=\\$\\\".*){[^}]*}(?=.*\\\")"
			}]
		},
		"storage": {
			"patterns": [{
				"name": "storage.type.built-in.belte",
				"match": "\\b(int|decimal|string|void|bool|byte|datetime|iterator|map|object|set|tuple|type|time|date|guid)\\b"
			}, {
				"name": "storage.type.namespace.belte",
				"match": "\\b(namespace)\\b"
			}, {
				"name": "storage.type.class.belte",
				"match": "\\b(class)\\b"
			}, {
				"name": "storage.type.enum.belte",
				"match": "\\b(enum)\\b"
			}, {
				"name": "storage.type.interface.belte",
				"match": "\\b(interface)\\b"
			}, {
				"name": "storage.type.union.belte",
				"match": "\\b(union)\\b"
			}, {
				"name": "storage.type.using.belte",
				"match": "\\b(using)\\b"
			}, {
				"name": "storage.type.number.belte",
				"match": "\\b(0x|0b)"
			}, {
				"name": "storage.type.modifier.access.belte",
				"match": "\\b(public|private|protected)\\b"
			}, {
				"name": "storage.type.modifier.belte",
				"match": "\\b(virtual|override)\\b"
			}, {
				"name": "storage.modifier.belte",
				"match": "\\b(static|abstract|sealed|const|async)\\b"
			}, {
				"name": "storage.type.doxygen.belte",
				"match": "(?<=///)\\s+(@param|@par|@parameter|@ret|@return|@summary|@overload|@deprecated)\\b"
			}]
		},
		"constant": {
			"patterns": [{
				"name": "constant.numeric.belte",
				"match": "\\b(\\d+)\\b"
			}, {
				"name": "constant.numeric.decimal.belte",
				"match": "(\\d)*\\.(\\d)+\\b"
			}, {
				"name": "constant.numeric.hex.belte",
				"match": "(?<=0x)([\\da-fA-F]+)\\b"
			}, {
				"name": "constant.numeric.binary.belte",
				"match": "(?<=0b)([0-1]+)\\b"
			}, {
				"name": "constant.language.belte",
				"match": "\\b(null|true|false)\\b"
			}]
		},
		"entity": {
			"patterns": [{
				"name": "entity.name.function.belte",
				"match": "\\b([a-zA-Z_]+\\w*)(?=\\()\\b"
			}, {
				"name": "entity.name.class.belte",
				"match": "\\b((?<=class\\s+)|(?<=\\:\\s*))([a-zA-Z_]+\\w*)\\b"
			}, {
				"name": "entity.name.interface.belte",
				"match": "\\b(?<=interface)\\s+([a-zA-Z_]+\\w*)\\b"
			}, {
				"name": "entity.name.namespace.belte",
				"match": "\\b((?<=namespace\\s+)|(?<=include\\s+.*))([a-zA-Z_]+\\w*)\\b"
			}, {
				"name": "entity.name.enum.belte",
				"match": "\\b(?<=enum)\\s+([a-zA-Z_]+\\w*)\\b"
			}, {
				"name": "entity.name.union.belte",
				"match": "\\b(?<=union)\\s+([a-zA-Z_]+\\w*)\\b"
			}, {
				"name": "entity.name.operator.belte",
				"match": "\\b(?<=operator)((\\=)|(\\=\\=)|(\\<\\=)|(\\>\\=)|(\\<)|(\\>)|(\\!\\=)|(\\[\\])|(\\*\\*)|(\\+)|(\\-)|(\\*)|(\\/)|(\\%)|(\\^)|(\\&)|(\\|)|(\\~)|(\\!)|(\\+\\=)|(\\-\\=)|(\\*\\=)|(\\*\\*\\=)|(\\/\\=)|(\\%\\=)|(\\^\\=)|(\\&\\=)|(\\|\\=)|(\\<\\<)|(\\>\\>)|(\\<\\<\\=)|(\\>\\>\\=)|(\\&\\&)|(\\|\\|)|(\\+\\+)|(\\-\\-)|(\\(\\)))(?=\\()"
			}, {
				"name": "entity.name.type.belte",
				"match": "\\b([a-zA-Z_]+\\w*)\\s*((?=\\s+[a-zA-Z_]+\\w*)|(?=\\[\\]\\s+[a-zA-Z_]+\\w*))\\b"
			}, {
				"name": "entity.name.type.parameter.belte",
				"match": "\\b(?<=\\()\\s*([a-zA-Z_]+\\w*)\\s+(?=[a-zA-Z_]+\\w*)\\b"
			}, {
				"name": "entity.name.type.specifier.belte",
				"match": "\\b(?<=\\<[a-zA-Z_]+[\\w\\,\\s\\=]+)(?<!\\>)\\s+([a-zA-Z_]+\\w*)\\b"
			}, {
				"name": "entity.name.function.preprocessor.belte",
				"match": "(?<=#define|#undef)\\s+\\S+"
			}, {
				"name": "entity.preprocessor.other.belte",
				"match": "((?<=#pragma|#if|#elif)\\s+.*)|((?<=#define\\s+.*)\\s+[^\\n]+\\n)"
			}]
		},
		"variable": {
			"patterns": [{
				"name": "variable.belte",
				"match": "\\b([a-zA-Z_]+\\w*)\\b"
			}, {
				"name": "variable.parameter.belte",
				"match": "\\b(?<=\\(\\s*[a-zA-Z_]+\\w*)\\s+([a-zA-Z_]+\\w*)\\b"
			}]
		},
		"comment": {
			"patterns": [{
				"name": "comment.line.double-slash",
				"match": "//.*"
			}, {
				"name": "comment.block",
				"match": "/\\*[\\s\\S]*\\*/"
			}, {
				"name": "comment.line.double-slash.documentation",
				"match": "///.*"
			}]
		}
	},
	"scopeName": "source.belte"
}